#!markdown

# Cowsay Demo
Demo using [cowsay (.NET)](https://github.com/rawsonm88/Cowsay) library

#!markdown

## Cowsay with DI

#!csharp

#r "nuget:Microsoft.Extensions.Hosting.Abstractions"
#r "nuget:Microsoft.Extensions.DependencyInjection.Abstractions, 6.0.0"
#r "nuget:Microsoft.Extensions.Hosting"
#r "nuget:Cowsay.Extensions.DependencyInjection"

#!csharp

using Cowsay.Abstractions;
public class MyClass
{
    private readonly ICattleFarmer _cattleFarmer;
    public MyClass(ICattleFarmer cattleFarmer)
    {
        _cattleFarmer = cattleFarmer;
    }

    public async Task SayHello()
    {
        var demoCow = await _cattleFarmer.RearCowAsync("default");
         Console.WriteLine(demoCow.Say("I was reared on dependency injection."));
    }
}

#!csharp

using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;

var host = Host.CreateDefaultBuilder()
    .ConfigureServices((context, services) =>
    {
        services.AddCowsay();
    })
    .Build();

#!csharp

var myClass = ActivatorUtilities.CreateInstance<MyClass>(host.Services);
await myClass.SayHello();

#!markdown

## Cowsay without DI

#!csharp

#r "nuget:Cowsay"

#!csharp

var demoCow = await Cowsay.DefaultCattleFarmer.RearCowWithDefaults("default");
display( demoCow.Say("Hello World") );

#!csharp

//decorate eyes
display( demoCow.Say("Hello World!!", cowEyes: "**") );

#!csharp

//decorate tongue
display( demoCow.Say("Hello World :P", cowTongue: "U") );
